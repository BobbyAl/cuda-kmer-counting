Reading sequence from ../data/ncbi_dataset/ncbi_dataset/data/GCF_000005845.2/GCF_000005845.2_ASM584v2_genomic.fna...
Sequence length: 4641652 bases
==PROF== Connected to process 206485 (/home/bobby/Documents/GitHub/cuda-kmer-counting/src/gpu_kmer_optimized)
Launching optimized GPU kernel with 1024 blocks of 256 threads each
==PROF== Profiling "count_kmers_coalesced_kernel" - 0: 0%....50%....100% - 31 passes
Found 256 unique 4-mers
Optimized GPU time: 3.9758 seconds
Top 10 most frequent k-mers:
GGCG: 75230
GCTG: 73406
CTGG: 66375
CAGC: 64940
TGGC: 63033
GCGG: 62396
GCAG: 61088
GCGC: 59343
CGGC: 57076
CCAG: 56577
==PROF== Disconnected from process 206485
[206485] gpu_kmer_optimized@127.0.0.1
  count_kmers_coalesced_kernel(const char *, int, int, unsigned int *, int) (1024, 1, 1)x(256, 1, 1), Context 1, Stream 7, Device 0, CC 7.5
    Section: GPU Speed Of Light Throughput
    ----------------------- ----------- ------------
    Metric Name             Metric Unit Metric Value
    ----------------------- ----------- ------------
    DRAM Frequency                  Ghz         6.99
    SM Frequency                    Ghz         1.38
    Elapsed Cycles                cycle    2,298,029
    Memory Throughput                 %         6.73
    DRAM Throughput                   %         0.17
    Duration                         ms         1.67
    L1/TEX Cache Throughput           %         9.51
    L2 Cache Throughput               %         4.23
    SM Active Cycles              cycle 2,260,610.93
    Compute (SM) Throughput           %        24.42
    ----------------------- ----------- ------------

    OPT   This workload exhibits low compute throughput and memory bandwidth utilization relative to the peak           
          performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak           
          typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential       
          reasons.                                                                                                      

    Section: GPU Speed Of Light Roofline Chart
    INF   The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The workload achieved 0%  
          of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide    
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline      
          analysis.                                                                                                     

    Section: PM Sampling
    ------------------------- ----------- ------------
    Metric Name               Metric Unit Metric Value
    ------------------------- ----------- ------------
    Maximum Buffer Size             Kbyte       786.43
    Dropped Samples                sample            0
    Maximum Sampling Interval       cycle       20,000
    # Pass Groups                                    1
    ------------------------- ----------- ------------

    Section: Compute Workload Analysis
    -------------------- ----------- ------------
    Metric Name          Metric Unit Metric Value
    -------------------- ----------- ------------
    Executed Ipc Active   inst/cycle         0.96
    Executed Ipc Elapsed  inst/cycle         0.95
    Issue Slots Busy               %        24.75
    Issued Ipc Active     inst/cycle         0.99
    SM Busy                        %        24.75
    -------------------- ----------- ------------

    OPT   Est. Local Speedup: 86.59%                                                                                    
          All compute pipelines are under-utilized. Either this workload is very small or it doesn't issue enough warps 
          per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.             

    Section: Memory Workload Analysis
    ----------------- ----------- ------------
    Metric Name       Metric Unit Metric Value
    ----------------- ----------- ------------
    Memory Throughput     Mbyte/s       556.40
    Mem Busy                    %         4.76
    Max Bandwidth               %         6.73
    L1/TEX Hit Rate             %        99.23
    L2 Hit Rate                 %        99.70
    Mem Pipes Busy              %         6.73
    ----------------- ----------- ------------

    Section: Memory Workload Analysis Tables
    OPT   Est. Speedup: 4.078%                                                                                          
          The memory access pattern for global loads from L1TEX might not be optimal. On average, only 18.3 of the 32   
          bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between   
          threads. Check the Source Counters section for uncoalesced global loads.                                      
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 9.415%                                                                                          
          The memory access pattern for local loads from L1TEX might not be optimal. On average, only 0.3 of the 32     
          bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between   
          threads. Check the Source Counters section for uncoalesced local loads.                                       
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 9.429%                                                                                          
          The memory access pattern for local stores to L1TEX might not be optimal. On average, only 0.3 of the 32      
          bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between   
          threads. Check the Source Counters section for uncoalesced local stores.                                      

    Section: Scheduler Statistics
    ---------------------------- ----------- ------------
    Metric Name                  Metric Unit Metric Value
    ---------------------------- ----------- ------------
    One or More Eligible                   %        24.71
    Issued Warp Per Scheduler                        0.25
    No Eligible                            %        75.29
    Active Warps Per Scheduler          warp         5.77
    Eligible Warps Per Scheduler        warp         0.29
    ---------------------------- ----------- ------------

    OPT   Est. Local Speedup: 75.29%                                                                                    
          Every scheduler is capable of issuing one instruction per cycle, but for this workload each scheduler only    
          issues an instruction every 4.0 cycles. This might leave hardware resources underutilized and may lead to     
          less optimal performance. Out of the maximum of 8 warps per scheduler, this workload allocates an average of  
          5.77 active warps per scheduler, but only an average of 0.29 warps were eligible per cycle. Eligible warps    
          are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible   
          warp results in no instruction being issued and the issue slot remains unused. To increase the number of      
          eligible warps, avoid possible load imbalances due to highly different execution durations per warp.          
          Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.            

    Section: Warp State Statistics
    ---------------------------------------- ----------- ------------
    Metric Name                              Metric Unit Metric Value
    ---------------------------------------- ----------- ------------
    Warp Cycles Per Issued Instruction             cycle        23.35
    Warp Cycles Per Executed Instruction           cycle        24.10
    Avg. Active Threads Per Warp                                19.83
    Avg. Not Predicated Off Threads Per Warp                    17.64
    ---------------------------------------- ----------- ------------

    OPT   Est. Speedup: 64.81%                                                                                          
          On average, each warp of this workload spends 15.1 cycles being stalled waiting for sibling warps at a CTA    
          barrier. A high number of warps waiting at a barrier is commonly caused by diverging code paths before a      
          barrier. This causes some warps to wait a long time until other warps reach the synchronization point.        
          Whenever possible, try to divide up the work into blocks of uniform workloads. If the block size is 512       
          threads or greater, consider splitting it into smaller groups. This can increase eligible warps without       
          affecting occupancy, unless shared memory becomes a new occupancy limiter. Also, try to identify which        
          barrier instruction causes the most stalls, and optimize the code executed before that synchronization point  
          first. This stall type represents about 64.8% of the total average of 23.3 cycles between issuing two         
          instructions.                                                                                                 
    ----- --------------------------------------------------------------------------------------------------------------
    INF   Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on         
          sampling data. The Kernel Profiling Guide                                                                     
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details    
          on each stall reason.                                                                                         
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 10.96%                                                                                          
          Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is         
          achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early     
          thread completion, and divergent flow control can significantly lower the number of active threads in a warp  
          per cycle. This workload achieves an average of 19.8 threads being active per cycle. This is further reduced  
          to 17.6 threads per warp due to predication. The compiler may use predication to avoid an actual branch.      
          Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads  
          execute the instructions. Try to avoid different execution paths within a warp when possible.                 

    Section: Instruction Statistics
    ---------------------------------------- ----------- ------------
    Metric Name                              Metric Unit Metric Value
    ---------------------------------------- ----------- ------------
    Avg. Executed Instructions Per Scheduler        inst   542,181.75
    Executed Instructions                           inst   65,061,810
    Avg. Issued Instructions Per Scheduler          inst   559,524.12
    Issued Instructions                             inst   67,142,895
    ---------------------------------------- ----------- ------------

    Section: Launch Statistics
    -------------------------------- --------------- ---------------
    Metric Name                          Metric Unit    Metric Value
    -------------------------------- --------------- ---------------
    Block Size                                                   256
    Function Cache Configuration                     CachePreferNone
    Grid Size                                                  1,024
    Registers Per Thread             register/thread              80
    Shared Memory Configuration Size           Kbyte           32.77
    Driver Shared Memory Per Block        byte/block               0
    Dynamic Shared Memory Per Block      Kbyte/block            4.10
    Static Shared Memory Per Block        byte/block               0
    # SMs                                         SM              30
    Stack Size                                                 1,024
    Threads                                   thread         262,144
    # TPCs                                                        15
    Enabled TPC IDs                                              all
    Uses Green Context                                             0
    Waves Per SM                                               11.38
    -------------------------------- --------------- ---------------

    Section: Occupancy
    ------------------------------- ----------- ------------
    Metric Name                     Metric Unit Metric Value
    ------------------------------- ----------- ------------
    Block Limit SM                        block           16
    Block Limit Registers                 block            3
    Block Limit Shared Mem                block            8
    Block Limit Warps                     block            4
    Theoretical Active Warps per SM        warp           24
    Theoretical Occupancy                     %           75
    Achieved Occupancy                        %        72.26
    Achieved Active Warps Per SM           warp        23.12
    ------------------------------- ----------- ------------

    OPT   Est. Speedup: 25%                                                                                             
          The 6.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the       
          hardware maximum of 8. This kernel's theoretical occupancy (75.0%) is limited by the number of required       
          registers.                                                                                                    

    Section: GPU and Memory Workload Distribution
    -------------------------- ----------- ------------
    Metric Name                Metric Unit Metric Value
    -------------------------- ----------- ------------
    Average DRAM Active Cycles       cycle    19,327.33
    Total DRAM Elapsed Cycles        cycle   69,950,464
    Average L1 Active Cycles         cycle 2,260,610.93
    Total L1 Elapsed Cycles          cycle   68,733,410
    Average L2 Active Cycles         cycle   478,466.54
    Total L2 Elapsed Cycles          cycle   52,091,304
    Average SM Active Cycles         cycle 2,260,610.93
    Total SM Elapsed Cycles          cycle   68,733,410
    Average SMSP Active Cycles       cycle 2,264,077.73
    Total SMSP Elapsed Cycles        cycle  274,933,640
    -------------------------- ----------- ------------

    OPT   Est. Speedup: 6.617%                                                                                          
          One or more L2 Slices have a much lower number of active cycles than the average number of active cycles.     
          Maximum instance value is 30.02% above the average, while the minimum instance value is 42.03% below the      
          average.                                                                                                      

    Section: Source Counters
    ------------------------- ----------- ------------
    Metric Name               Metric Unit Metric Value
    ------------------------- ----------- ------------
    Branch Instructions Ratio           %         0.39
    Branch Instructions              inst   25,205,991
    Branch Efficiency                   %        67.61
    Avg. Divergent Branches                  39,874.69
    ------------------------- ----------- ------------

    OPT   Est. Speedup: 10%                                                                                             
          This kernel has uncoalesced global accesses resulting in a total of 40793 excessive sectors (45% of the total 
          89885 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations.     
          The CUDA Programming Guide                                                                                    
          (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional      
          information on reducing uncoalesced device memory accesses.                                                   
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 66.89%                                                                                          
          This kernel has uncoalesced shared accesses resulting in a total of 827552 excessive wavefronts (68% of the   
          total 1220768 wavefronts). Check the L1 Wavefronts Shared Excessive table for the primary source locations.   
          The CUDA Best Practices Guide                                                                                 
           (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#shared-memory-in-matrix-multiplication-c
          -ab) has an example on optimizing shared memory accesses.                                                     

